---
- name: debug instance
  debug:
    var: gce_instance
  when: gcp_debug

# ------------------------------ #
# --- # VM Instance State # ---  #
# ------------------------------ #
- name: switch gce instance to {{ gce_instance.state }} state
  gcp_compute_instance:  
    name:      "{{ gce_instance.name }}"
    zone:      "{{ gce_instance.zone }}"
    state:     "present"
    status:    "{% if gce_instance.state == 'stopped' %}TERMINATED{% else %}RUNNING{% endif %}"
    project:   "{{ gcp_project_id }}"
    auth_kind: "serviceaccount"
    service_account_file: "{{ gcp_service_account_file }}"
    labels: "{{ gce_instance.labels }}"
  register: gce_instance_result
  when: gce_instance.state == "started" or gce_instance.state == "stopped"

- name: debug instance info
  debug:
    var: gce_instance_info
  when: gce_instance_info is defined and gcp_debug

# --------------------------- #
# --- # Network Config # ---  #
# --------------------------- #
- name: set network interface empty
  set_fact:
    network_interface_access_config: 
  when: gce_ip.name is not defined

- name: set network interface data 
  set_fact:
    network_interface_access_config: 
          - name: External NAT
            type: ONE_TO_ONE_NAT
            nat_ip: "{{ gce_ip_result }}"
  when: gce_ip.name is defined

- name: debug network interface access config
  debug:
    var: network_interface_access_config
  when: gcp_debug

# ------------------------------- #
# --- # VM Instance Config # ---  #
# ------------------------------- #
- name: add gce instance
  gcp_compute_instance:   
    name:         "{{ gce_instance.name }}"
    machine_type: "{{ gce_instance.type }}"
    zone:         "{{ gce_instance.zone }}"
    state:        "{{ gce_instance.state }}"
    disks:
      - source: "{{ gce_disk_d0 }}"
        boot: true
        auto_delete: "{{Â gce_disk.device.d0.auto_delete | default(true) }} "
    network_interfaces:
      - network: "{{ gce_network_result }}"
        access_configs: "{{ network_interface_access_config }}"
    scheduling:
      on_host_maintenance: "MIGRATE"
      automatic_restart: yes
    service_accounts:
      - email:  "{{ gce_instance.service_account }}"
        scopes: "{{ gce_instance.api_auth }}"
    deletion_protection: "{{ gce_instance.delete_protection }}"
    labels:    "{{ gce_instance.labels }}"
    project:   "{{ gcp_project_id }}"
    auth_kind: "serviceaccount"
    service_account_file: "{{ gcp_service_account_file }}"
    scopes:
      - "{{ gcp_api_scopes.COMPUTE }}"
  register: gce_instance_result
  when: gce_instance.state == "present"

- name: debug instance create result
  debug:
    var: gce_instance_result
  when: gcp_debug and gce_instance.state == "present"

# ------------------------------- #
# --- # VM Instance Remove # ---  #
# ------------------------------- #
- name: remove gce instance
  gcp_compute_instance:   
    name:         "{{ gce_instance.name }}"
    zone:         "{{ gce_instance.zone }}"
    state:        "{{ gce_instance.state }}"
    project:      "{{ gcp_project_id }}"
    auth_kind:    "serviceaccount"
    service_account_file: "{{ gcp_service_account_file }}"    
  register: gce_instance_remove_result
  when: gce_instance.state == "absent"

- name: debug instance result
  debug:
    var: gce_instance_remove_result
  when: gcp_debug and gce_instance.state == "absent"